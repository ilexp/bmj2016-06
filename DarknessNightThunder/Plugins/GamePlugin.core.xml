<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GamePlugin.core</name>
    </assembly>
    <members>
        <member name="T:DarknessNightThunder.ActorRenderer">
            <summary>
            Renders a "retro RPG"-like actor sprite with an automatically determined depth offset that fits to
            the one generated by a <see cref="T:Duality.Plugins.Tilemaps.TilemapRenderer"/>.
            </summary>
        </member>
        <member name="M:DarknessNightThunder.ActorRenderer.GetDepthOffsetAt(Duality.Vector2)">
            <summary>
            Determines the depth offset that is generated at the specified world position.
            This also inclues the renderers overall offset as specified in <see cref="P:DarknessNightThunder.ActorRenderer.DepthOffset"/>.
            </summary>
            <param name="worldPos"></param>
            <returns></returns>
        </member>
        <member name="M:DarknessNightThunder.ActorRenderer.UpdateVisibleFrames">
            <summary>
            Updates the <see cref="P:DarknessNightThunder.ActorRenderer.CurrentFrame"/>, <see cref="P:DarknessNightThunder.ActorRenderer.NextFrame"/> and <see cref="P:DarknessNightThunder.ActorRenderer.CurrentFrameProgress"/> properties immediately.
            This is called implicitly once each frame before drawing, so you don't normally call this. However, when changing animation
            parameters and requiring updated animation frame data immediately, this could be helpful.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.Rect">
            <summary>
            [GET / SET] The rectangular area the sprite occupies. Relative to the <see cref="T:Duality.GameObject"/>.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.SharedMaterial">
            <summary>
            [GET / SET] The <see cref="T:Duality.Resources.Material"/> that is used for rendering the sprite.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.CustomMaterial">
            <summary>
            [GET / SET] A custom, local <see cref="T:Duality.Drawing.BatchInfo"/> overriding the <see cref="P:DarknessNightThunder.ActorRenderer.SharedMaterial"/>,
            allowing this sprite to look unique without having to create its own <see cref="T:Duality.Resources.Material"/> Resource.
            However, this feature should be used with caution: Performance is better using <see cref="P:DarknessNightThunder.ActorRenderer.SharedMaterial">shared Materials</see>.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.ColorTint">
            <summary>
            [GET / SET] A color by which the sprite is tinted.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.DepthOffset">
            <summary>
            [GET / SET] The depth offset for the <see cref="T:DarknessNightThunder.ActorRenderer"/> that is added
            to each output vertex without contributing to perspective effects such as parallax.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.DepthScale">
            <summary>
            [GET / SET] The depth offset scale that is used to determine how much depth each 
            unit of Y movement adds.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.IsVertical">
            <summary>
            [GET / SET] Whether the rendered sprite is considered vertical or flat with regard
            to its depth offset generation.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.Height">
            <summary>
            [GET / SET] The actor's current height above the ground. This is usually
            zero / the same as the ground level, except when jumping, floating or being 
            partially submerged.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimFirstFrame">
            <summary>
            [GET / SET] The index of the first frame to display. Ignored if <see cref="P:DarknessNightThunder.ActorRenderer.CustomFrameSequence"/> is set.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Pixmap.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimFrameCount">
            <summary>
            [GET / SET] The number of continous frames to use for the animation. Ignored if <see cref="P:DarknessNightThunder.ActorRenderer.CustomFrameSequence"/> is set.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Pixmap.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimDuration">
            <summary>
            [GET / SET] The time a single animation cycle needs to complete, in seconds.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimTime">
            <summary>
            [GET / SET] The animations current play time, i.e. the current state of the animation.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimPaused">
            <summary>
            [GET / SET] If true, the animation is paused and won't advance over time. <see cref="P:DarknessNightThunder.ActorRenderer.AnimTime"/> will stay constant until resumed.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.AnimLoopMode">
            <summary>
            [GET / SET] The animations loop behaviour.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.CustomFrameSequence">
            <summary>
            [GET / SET] A custom sequence of frame indices that will be used instead of the default range
            specified by <see cref="P:DarknessNightThunder.ActorRenderer.AnimFirstFrame"/> and <see cref="P:DarknessNightThunder.ActorRenderer.AnimFrameCount"/>. Unused if set to null.
            </summary>
            <remarks>
            Animation indices are looked up in the <see cref="P:Duality.Resources.Pixmap.Atlas"/> map
            of the <see cref="T:Duality.Resources.Texture"/> that is used.
            </remarks>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.IsAnimationRunning">
            <summary>
            [GET] Whether the animation is currently running, i.e. if there is anything animated right now.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.CurrentFrame">
            <summary>
            [GET] The currently visible animation frames index.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.NextFrame">
            <summary>
            [GET] The next visible animation frames index.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.ActorRenderer.CurrentFrameProgress">
            <summary>
            [GET] The current animation frames progress where zero means "just entered the current frame"
            and one means "about to leave the current frame". This value is also used for smooth animation blending.
            </summary>
        </member>
        <member name="T:DarknessNightThunder.ActorRenderer.LoopMode">
            <summary>
            Describes the sprite animations loop behaviour.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.Once">
            <summary>
            The animation is played once an then remains in its last frame.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.Loop">
            <summary>
            The animation is looped: When reaching the last frame, it begins again at the first one.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.PingPong">
            <summary>
            The animation plays forward until reaching the end, then reverses and plays backward until 
            reaching the start again. This "pingpong" behaviour is looped.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.RandomSingle">
            <summary>
            A single frame is selected randomly each time the object is initialized and remains static
            for its whole lifetime.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.FixedSingle">
            <summary>
            A fixed, single frame is displayed. Which one depends on the one you set in the editor or
            in source code.
            </summary>
        </member>
        <member name="F:DarknessNightThunder.ActorRenderer.LoopMode.Queue">
            <summary>
            The <see cref="P:DarknessNightThunder.ActorRenderer.CustomFrameSequence"/> is interpreted and processed as a queue where <see cref="P:DarknessNightThunder.ActorRenderer.AnimDuration"/>
            is the time a single frame takes.
            </summary>
        </member>
        <member name="T:DarknessNightThunder.CameraController">
            <summary>
            Moves the camera to follow an object, but keeps it within the constraints
            of the current tilemaps.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.CameraController.Smoothness">
            <summary>
            [GET / SET] How smooth the camera should follow its target.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.CameraController.TargetObject">
            <summary>
            [GET / SET] The target object the camera should follow.
            </summary>
        </member>
        <member name="T:DarknessNightThunder.CharacterAnimator">
            <summary>
            Applies "retro RPG"-like character movement based on a physical model.
            </summary>
        </member>
        <member name="M:DarknessNightThunder.ISpellHost.DrainEnergy(System.Single)">
            <summary>
            Atemmpts to drain the specified amount of energy from the spell host and returns the
            amount of energy that was actually drained.
            </summary>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="T:DarknessNightThunder.CharacterController">
            <summary>
            Applies "retro RPG"-like character movement based on a physical model.
            </summary>
        </member>
        <member name="T:DarknessNightThunder.DarknessNightThunderCorePlugin">
            <summary>
            Defines a Duality core plugin.
            </summary>
        </member>
        <member name="P:DarknessNightThunder.SpellVars.ObjectVar.Elements">
            <summary>
            [GET] Enumerates all the elements in this object variable, sorted from most to least weight.
            </summary>
        </member>
        <member name="T:DarknessNightThunder.Player">
            <summary>
            Represents a player and applies user input to the controlled <see cref="P:DarknessNightThunder.Player.CharacterController"/>.
            </summary>
        </member>
    </members>
</doc>
